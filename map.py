# -*- coding: utf-8 -*-import mathimport timefrom fake_useragent import UserAgentfrom pyecharts.charts import Mapfrom pyecharts import options as optsimport requestsimport jsonimport sysua = UserAgent(verify_ssl=False)headers = {'User-Agent': ua.random}url = "https://c.m.163.com/ug/api/wuhan/app/index/feiyan-data-list?t=1580469818264"def getEpidemicInfo(url):    try:        response = requests.get(url, headers=headers)        print(response.status_code)        if response.status_code == 200:            content_field = json.loads(response.text)            epidemicInfo = content_field['data']['list']            return epidemicInfo        else:            print('请求错误码：' + response.status_code)            return None    except Exception as e:        print('此页有问题！', e)        return Nonedef makeEpidemicInfoMap(dict):    # 省和直辖市    province_distribution = dict    value = province_distribution.values()    # maptype='china' 只显示全国直辖市和省级    print(province_distribution)    title = str(int(time.strftime("%Y%m%d")) - 1) + sys.argv[1] + "疫情地图"    epidemicCount = []    for k, v in dict.items():        epidemicCount.append(v)    epidemicCount.sort(reverse=True)    maxEpidemic = handle(epidemicCount.pop(0))    maxEpidemic = int(maxEpidemic)    map = Map()    map.set_global_opts(        title_opts=opts.TitleOpts(title=title),        visualmap_opts=opts.VisualMapOpts(max_=200, is_piecewise=True,                                          pieces=[                                              {"max": 9999999, "min": maxEpidemic, "label": ">" + str(maxEpidemic),                                               "color": "#780707"},  # 数据范围分段，分颜色，可以根据数据大小具体分配大小                                              {"max": int(maxEpidemic), "min": int(maxEpidemic / 8) * 7,                                               "label": str(int(maxEpidemic / 8) * 7) + "-" + str(int(maxEpidemic)),                                               "color": "#B40404"},                                              {"max": int(maxEpidemic / 8) * 7, "min": int(maxEpidemic / 8) * 4,                                               "label": str(int(maxEpidemic / 8) * 4) + "-" + str(                                                   int(maxEpidemic / 8) * 7 - 1), "color": "#CD1111"},                                              {"max": int(maxEpidemic / 8) * 4, "min": int(maxEpidemic / 8),                                               "label": str(int(maxEpidemic / 8)) + "-" + str(                                                   int(maxEpidemic / 8) * 4 - 1), "color": "#F68181"},                                              {"max": int(maxEpidemic / 8), "min": 1,                                               "label": "1-" + str(int(maxEpidemic / 8)), "color": "#F5A9A9"},                                              {"max": 0, "min": 0, "label": "0", "color": "#FFFFFF"},                                          ], )  # 最大数据范围，分段    )    map.add(title, data_pair=province_distribution.items(), maptype=sys.argv[1], is_roam=True)    map.render(sys.argv[1] + '疫情地图.html')# 生成本省疫情列表def makedict(list):    cityList = {}    for item in list:        for k, v in item.items():            if v == sys.argv[1]:                if str(item["confirm"]).isdigit():                    if v == "北京" or v == "上海" or v == "天津":                        cityList[item['name'] + '区'] = int(item["confirm"])                    elif "自治州" in v:                        continue                    else:                        cityList[item['name'] + '市'] = int(item["confirm"])    return cityListdef handle(count):    temp = str(count)    return int(temp[0]) * math.pow(10, len(temp) - 1)if __name__ == '__main__':    list_data = getEpidemicInfo(url)    dict_data = makedict(list_data)    makeEpidemicInfoMap(dict_data)